{
  "swagger": "2.0",
  "info": {
    "title": "Recipe Manager API",
    "description": "REST API for managing recipes and users",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/auth/github": {
      "get": {
        "summary": "Start GitHub OAuth login",
        "description": "Redirects user to GitHub for authentication.",
        "responses": {
          "302": {
            "description": "Redirect to GitHub OAuth login."
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "summary": "GitHub OAuth callback",
        "description": "Callback endpoint for GitHub OAuth. Exchanges code for user profile.",
        "responses": {
          "302": {
            "description": "Redirect to protected resource or error."
          }
        }
      }
    },
    "/logout": {
      "get": {
        "summary": "Logout user",
        "description": "Logs out the current user and ends the session.",
        "responses": {
          "302": {
            "description": "Redirect to home."
          }
        }
      }
    },
    "/protected": {
      "get": {
        "summary": "Protected route (requires authentication)",
        "description": "Returns user info if authenticated. Requires GitHub OAuth.",
        "security": [
          { "githubOAuth": [] }
        ],
        "responses": {
          "200": {
            "description": "Authenticated user info.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "user": { "type": "object" }
              }
            }
          },
          "401": {
            "description": "Unauthorized. User not authenticated.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "API Root",
        "responses": {
          "200": {
            "description": "API information",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Recipe Manager API" },
                "version": { "type": "string", "example": "1.0.0" }
              }
            }
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "summary": "Get all recipes",
        "responses": {
          "200": {
            "description": "List of recipes",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Recipe" }
            }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "post": {
        "summary": "Create a new recipe",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "recipe",
            "required": true,
            "schema": { "$ref": "#/definitions/Recipe" }
          }
        ],
        "responses": {
          "201": {
            "description": "Recipe created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string", "example": "507f1f77bcf86cd799439011" }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/recipes/{id}": {
      "get": {
        "summary": "Get recipe by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found",
            "schema": { "$ref": "#/definitions/Recipe" }
          },
          "404": {
            "description": "Recipe not found",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "put": {
        "summary": "Update a recipe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Recipe ID"
          },
          {
            "in": "body",
            "name": "recipe",
            "required": true,
            "schema": { "$ref": "#/definitions/Recipe" }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Recipe updated successfully" }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "404": {
            "description": "Recipe not found",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "delete": {
        "summary": "Delete a recipe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Recipe ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Recipe deleted successfully" }
              }
            }
          },
          "404": {
            "description": "Recipe not found",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/User" }
            }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "post": {
        "summary": "Register a new user",
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["username", "email", "password"],
              "properties": {
                "username": { "type": "string", "example": "john_doe" },
                "email": { "type": "string", "format": "email", "example": "john.doe@example.com" },
                "password": { "type": "string", "format": "password", "example": "yourPassword123" },
                "favoriteRecipes": {
                  "type": "array",
                  "items": { "type": "string" },
                  "example": [],
                  "description": "Array of recipe IDs"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string", "example": "507f1f77bcf86cd799439011" }
              }
            }
          },
          "400": {
            "description": "Validation error or email already registered",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Login user with email and password",
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["email", "password"],
              "properties": {
                "email": { "type": "string", "format": "email", "example": "john.doe@example.com" },
                "password": { "type": "string", "format": "password", "example": "yourPassword123" }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Login successful" },
                "user": { "$ref": "#/definitions/User" }
              }
            }
          },
          "400": {
            "description": "Invalid email or password",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": { "$ref": "#/definitions/User" }
          },
          "404": {
            "description": "User not found",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "put": {
        "summary": "Update a user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "in": "body",
            "name": "user",
            "required": true,
            "schema": { "$ref": "#/definitions/User" }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "User updated successfully" }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "404": {
            "description": "User not found",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "User deleted successfully" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "500": {
            "description": "Server error",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    }
  },
  "definitions": {
    "githubOAuth": {
      "type": "oauth2",
      "authorizationUrl": "https://github.com/login/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "user:email": "Access user email address"
      }
    },
    "Recipe": {
      "type": "object",
      "required": ["name", "ingredients", "instructions", "prepTime", "cookTime", "servings", "cuisine", "imageUrl", "difficulty", "author"],
      "properties": {
        "name": { "type": "string", "example": "Spaghetti Carbonara" },
        "ingredients": {
          "type": "array",
          "items": { "type": "string" },
          "example": ["200g spaghetti", "2 eggs", "100g pancetta", "50g parmesan cheese", "Black pepper"]
        },
        "instructions": { "type": "string", "example": "Cook spaghetti in salted boiling water. Fry pancetta until crispy. Whisk eggs with parmesan. Drain pasta, mix with pancetta, then add egg mixture off heat. Season with black pepper." },
        "prepTime": { "type": "number", "example": 10 },
        "cookTime": { "type": "number", "example": 15 },
        "servings": { "type": "number", "example": 4 },
        "cuisine": { "type": "string", "example": "Italian" },
        "imageUrl": { "type": "string", "format": "uri", "example": "https://example.com/spaghetti-carbonara.jpg" },
        "difficulty": { "type": "string", "enum": ["Easy", "Medium", "Hard"], "example": "Medium" },
        "tags": { "type": "array", "items": { "type": "string" }, "example": ["pasta", "italian", "comfort-food"] },
        "author": { "type": "string", "example": "Chef Mario" },
        "dateCreated": { "type": "string", "format": "date-time", "example": "2024-01-15T10:30:00Z" },
        "rating": { "type": "number", "minimum": 1, "maximum": 5, "example": 4.5 }
      }
    },
    "User": {
      "type": "object",
      "required": ["username", "email"],
      "properties": {
        "username": { "type": "string", "example": "john_doe" },
        "email": { "type": "string", "format": "email", "example": "john.doe@example.com" },
        "favoriteRecipes": {
          "type": "array",
          "items": { "type": "string" },
          "example": [],
          "description": "Array of recipe IDs"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Error message description" }
      }
    }
  }
}